import { createServerSideHelpers } from "@trpc/react-query/server";
import {
  type InferGetServerSidePropsType,
  type GetServerSidePropsContext,
} from "next";
import Head from "next/head";
import Image from "next/image";
import React from "react";
import SuperJSON from "superjson";
import PostView from "~/components/PostView";
import Layout from "~/components/layout";
import { appRouter } from "~/server/api/root";
import { db } from "~/server/db";
import { api } from "~/utils/api";

const Posts = (props: { userId: string }) => {
  const { data, isLoading } = api.post.getPostsByUserId.useQuery({
    userId: props.userId,
  });
  return (
    <section>
      {data?.map((post) => <PostView key={post.post.id} post={post} />)}
    </section>
  );
};

const ProfilePage = (
  props: InferGetServerSidePropsType<typeof getServerSideProps>,
) => {
  const { data, isLoading } = api.user.getUserById.useQuery({
    userId: props.userId,
  });

  if (!data) return <h1>Something went wrong</h1>;
  if (isLoading) return <h1>Loading...</h1>;
  return (
    <>
      <Head>
        <title>{`${data.username}'s profile page`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <section>
          <Image
            width={96}
            height={96}
            src={data.profilePicture}
            alt={`${data.username}'s profile picture`}
            className="aspect-square  rounded-full border-4 border-black"
          />
          <div className="text-2xl">@{data.username}</div>
        </section>
        <Posts userId={data.id} />
      </Layout>
    </>
  );
};

export default ProfilePage;

export const getServerSideProps = async (
  context: GetServerSidePropsContext<{ slug: string }>,
) => {
  const slug = context.params?.slug;
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: {
      db: db,
      userId: null,
    },
    transformer: SuperJSON,
  });

  if (typeof slug !== "string") {
    throw new Error("no slug");
  }

  await helpers.user.getUserById.prefetch({ userId: slug });

  return {
    props: {
      userId: slug,
    },
  };
};
